---
- hosts: "scr1_nas"
  become: true
  gather_facts: true
  roles:
    - role: "mrlesmithjr.zfs"
    - role: "rootless"
  tasks:
    - name: Add user to sudoers
      ansible.builtin.copy:
        content: "{{ ansible_user }} ALL=(ALL:ALL) NOPASSWD:ALL"
        dest: "/etc/sudoers.d/{{ ansible_user }}_nopasswd"
        mode: "0440"

    - name: "add dominic as a user"
      ansible.builtin.user:
        name: dominicrabbito
        comment: Dominic Rabbito

    - name: gather installed packages
      ansible.builtin.package_facts:
        manager: auto

    - name: Enable universe repository
      ansible.builtin.apt_repository:
        repo: "{{ item }}"
      loop:
        - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }} universe"
        - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }}-updates universe"
        - "deb http://security.ubuntu.com/ubuntu/ {{ ansible_distribution_release }}-security universe"

    - name: upgrade all system packages
      ansible.builtin.apt:
        upgrade: full
        update_cache: true
        cache_valid_time: 3600
        autoclean: true
        autoremove: true
      register: apt_upgrade
      retries: 5
      until: apt_upgrade is success

    - name: install common packages
      ansible.builtin.apt:
        name: "{{ apt_install_packages }}"
        install_recommends: false
        update_cache: true
        cache_valid_time: 3600
        autoclean: true
        autoremove: true
      register: apt_install_common
      retries: 5
      until: apt_install_common is success
      when:
        - apt_install_packages is defined
        - apt_install_packages is iterable
        - apt_install_packages | length > 0

    - name: check if reboot required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: remove bloat
      block:
        - name: check if snap is installed
          ansible.builtin.debug:
            msg: "snapd is installed"
          register: snapd_check
          when:
            - "'snapd' in apt_remove_packages"
            - "'snapd' in ansible_facts.packages"
        - name: remove snap packages
          ansible.builtin.command: snap remove {{ item }}
          loop:
            - lxd
            - core18
            - core20
            - snapd
          when:
            - "'snapd' in apt_remove_packages"
            - "'snapd' in ansible_facts.packages"
            - snapd_check.failed is defined
        - name: remove packages
          ansible.builtin.apt:
            name: "{{ apt_remove_packages }}"
            state: absent
            autoremove: true
        - name: remove files
          ansible.builtin.file:
            state: absent
            path: "{{ item }}"
          loop:
            - "/home/{{ ansible_user }}/.snap"
            - "/snap"
            - "/var/snap"
            - "/var/lib/snapd"
            - "/var/cache/snapd"
            - "/usr/lib/snapd"
          when:
            - "'snapd' in apt_remove_packages"
      when:
        - apt_remove_packages is defined
        - apt_remove_packages is iterable
        - apt_remove_packages | length > 0

    - name: enable and start cockpit socket
      ansible.builtin.systemd:
        state: started
        enabled: yes
        name: cockpit.socket

    - name: set timezone
      community.general.timezone:
        name: "{{ timezone | default('America/New_York') }}"

    - name: disable swap at runtime
      ansible.builtin.command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: disable swap on boot
      ansible.posix.mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      loop:
        - swap
        - none

    - name: setup minio directory
      ansible.builtin.file:
        path: /tank/minio
        state: directory
        group: "1000"
        owner: "1000"
        mode: "0600"

    - name: run minio
      containers.podman.podman_container:
        name: minio
        image: "quay.io/minio/minio:RELEASE.2021-09-18T18-09-59Z"
        state: started
        command:
          - "server"
          - "/data"
          - "--console-address"
          - ":9001"
        ports:
          - "9000:9000"
          - "9001:9001"
        env:
          MINIO_UPDATE: "off"
          MINIO_PROMETHEUS_AUTH_TYPE: "public"
        volume:
          - "/tank/minio:/data:z"
      become: false

    #
    # - name: run pull-through cache
    #   containers.podman.podman_container:
    #     name: registry-docker.io
    #     image: "docker.io/library/registry:2"
    #     state: started
    #     command:
    #       - "server"
    #       - "/data"
    #       - "--console-address"
    #       - ":9001"
    #     ports:
    #       - "5000:5000"
    #     env:
    #       REGISTRY_PROXY_REMOTEURL: "https://registry-1.docker.io"
    #     volume:
    #       - "/tank/minio:/data:z"
    #   become: false

    - name: warn if reboot required
      debug:
        msg: "Reboot is required"
      when: reboot_required_file.stat.exists == true
