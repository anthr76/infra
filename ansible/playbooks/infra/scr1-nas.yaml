---
- hosts: "scr1_nas"
  become: true
  gather_facts: true
  roles:
    - role: "rootless"
  tasks:
    - name: Add user to sudoers
      ansible.builtin.copy:
        content: "{{ ansible_user }} ALL=(ALL:ALL) NOPASSWD:ALL"
        dest: "/etc/sudoers.d/{{ ansible_user }}_nopasswd"
        mode: "0440"

    - name: "add dominic as a user"
      ansible.builtin.user:
        name: dominicrabbito
        comment: Dominic Rabbito

    - name: create utils user
      ansible.builtin.user:
        name: utils
        generate_ssh_key: yes
        ssh_key_type: ed25519
        ssh_key_file: .ssh/id_ed25519
        uid: 1002
        groups: sudo, anthonyjrabbito

    - name: gather installed packages
      ansible.builtin.package_facts:
        manager: auto

    - name: Enable universe repository
      ansible.builtin.apt_repository:
        repo: "{{ item }}"
      loop:
        - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }} universe"
        - "deb http://archive.ubuntu.com/ubuntu/ {{ ansible_distribution_release }}-updates universe"
        - "deb http://security.ubuntu.com/ubuntu/ {{ ansible_distribution_release }}-security universe"

    - name: install common packages
      ansible.builtin.apt:
        name: "{{ apt_install_packages }}"
        install_recommends: false
        update_cache: true
        cache_valid_time: 3600
        autoclean: true
        autoremove: true
      register: apt_install_common
      retries: 5
      until: apt_install_common is success
      when:
        - apt_install_packages is defined
        - apt_install_packages is iterable
        - apt_install_packages | length > 0

    - name: check if reboot required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: remove bloat
      block:
        - name: check if snap is installed
          ansible.builtin.debug:
            msg: "snapd is installed"
          register: snapd_check
          when:
            - "'snapd' in apt_remove_packages"
            - "'snapd' in ansible_facts.packages"
        - name: remove snap packages
          ansible.builtin.command: snap remove {{ item }}
          loop:
            - lxd
            - core18
            - core20
            - snapd
          when:
            - "'snapd' in apt_remove_packages"
            - "'snapd' in ansible_facts.packages"
            - snapd_check.failed is defined
        - name: remove packages
          ansible.builtin.apt:
            name: "{{ apt_remove_packages }}"
            state: absent
            autoremove: true
        - name: remove files
          ansible.builtin.file:
            state: absent
            path: "{{ item }}"
          loop:
            - "/home/{{ ansible_user }}/.snap"
            - "/snap"
            - "/var/snap"
            - "/var/lib/snapd"
            - "/var/cache/snapd"
            - "/usr/lib/snapd"
          when:
            - "'snapd' in apt_remove_packages"
      when:
        - apt_remove_packages is defined
        - apt_remove_packages is iterable
        - apt_remove_packages | length > 0

    - name: enable and start cockpit socket
      ansible.builtin.systemd:
        state: started
        enabled: yes
        name: cockpit.socket

    - name: set timezone
      community.general.timezone:
        name: "{{ timezone | default('America/New_York') }}"

    - name: disable swap at runtime
      ansible.builtin.command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: disable swap on boot
      ansible.posix.mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      loop:
        - swap
        - none

    - name: setup podman user directory
      ansible.builtin.file:
        path: /tank/system/user
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: setup podman pull-through directory
      ansible.builtin.file:
        path: /tank/system/user/docker_cache
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: run docker pull-through cache
      containers.podman.podman_container:
        name: registry-docker.io
        image: "docker.io/library/registry:2.7.1"
        state: started
        ports:
          - "5000:5000"
        env:
          REGISTRY_PROXY_REMOTEURL: "https://registry-1.docker.io"
        volume:
          - "/tank/system/user/docker_cache:/var/lib/registry:z"
        generate_systemd:
          path: "/home/{{ ansible_user }}/.config/systemd/user"
          restart_policy: always
          time: 120
          names: true
          container_prefix: ansible
      become: false

    - name: run docker pull-through cache
      containers.podman.podman_container:
        name: registry-docker.io
        image: "docker.io/library/registry:2.7.1"
        state: started
        ports:
          - "5000:5000"
        env:
          REGISTRY_PROXY_REMOTEURL: "https://registry-1.docker.io"
        volume:
          - "/tank/system/user/docker_cache:/var/lib/registry:z"
        generate_systemd:
          path: "/home/{{ ansible_user }}/.config/systemd/user"
          restart_policy: always
          time: 120
          names: true
          container_prefix: ansible
      become: false

    # https://github.com/google/cadvisor/pull/3021
    - name: ensure cadvisor
      containers.podman.podman_container:
        name: cadvisor
        image: "gcr.io/google-containers/cadvisor:v0.36.0"
        state: absent
        privileged: true
        network: host
        volume:
          - "/:/rootfs:ro"
          - "/var/run:/var/run:ro"
          - "/sys:/sys:ro"
          - "/dev/disk:/dev/disk/:ro"
        command: "-port=8005"
        generate_systemd:
          path: "/home/{{ ansible_user }}/.config/systemd/user"
          restart_policy: always
          time: 120
          names: true
          container_prefix: ansible
      become: false

    - name: run node-exporter
      containers.podman.podman_container:
        name: node-exporter
        image: "quay.io/prometheus/node-exporter:v1.3.1"
        state: started
        privileged: true
        network: host
        volume:
          - "/:/rootfs:ro,rslave"
          - "/sys:/host/sys:ro"
          - "/proc:/host/proc:ro"
        command: "--path.procfs=/host/proc --path.rootfs=/rootfs --path.sysfs=/host/sys"
        generate_systemd:
          path: "/home/{{ ansible_user }}/.config/systemd/user"
          restart_policy: always
          time: 120
          names: true
          container_prefix: ansible
      become: false

    - name: enable podman-systemd | registry
      ansible.builtin.systemd:
        name: ansible-registry-docker.io
        enabled: true
        scope: user
      environment:
        XDG_RUNTIME_DIR: "/run/user/{{ ansible_user_uid }}"
      become: false

    - name: ensure podman-systemd | cadvisor
      ansible.builtin.systemd:
        name: ansible-cadvisor
        enabled: false
        state: stopped
        scope: user
      environment:
        XDG_RUNTIME_DIR: "/run/user/{{ ansible_user_uid }}"
      become: false

    - name: enable podman-systemd | node-exporter
      ansible.builtin.systemd:
        name: ansible-node-exporter
        enabled: true
        scope: user
      environment:
        XDG_RUNTIME_DIR: "/run/user/{{ ansible_user_uid }}"
      become: false

    - name: zfs
      ansible.builtin.include_role:
        role: "mrlesmithjr.zfs"

    - name: warn if reboot required
      debug:
        msg: "Reboot is required"
      when: reboot_required_file.stat.exists == true
