---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: route-to-infra
  namespace: kube-system
  labels:
    k8s-app: route-to-infra
    kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  selector:
    matchLabels:
      name: route-to-infra
  template:
    metadata:
      name: route-to-infra
      labels:
        name: route-to-infra
    spec:
      serviceAccountName: route-to-infra
      hostNetwork: true
      containers:
        - name: route-to-infra
          image: docker.io/bitnami/kubectl
          securityContext:
            capabilities:
              add: ["NET_ADMIN"]
          env:
            - name: GATEWAY_IP
              value: "10.136.136.11"
          imagePullPolicy: Always
          command:
            - "/bin/bash"
            - "-ec"
            - |
              gateway="${GATEWAY_IP}";
              lastversion="";
              while true;
              do
                currentversion="$(kubectl get configmap route-to-infra -n kube-system -o go-template --template '{{.metadata.resourceVersion}}')"
                if [ $? -ne 0 ]; then
                  echo "Error getting configmap version, taking no action";
                  sleep 15;
                  continue;
                fi;
                if [ "${lastversion}" == "${currentversion}" ]; then
                  lastversion=${currentversion};
                  sleep 5;
                  continue;
                fi;
                echo "Change detected to configmap (lastVersion=${lastversion}, currVersion=${currentversion})!";
                kubectl get configmap route-to-infra -n kube-system -o go-template --template '{{.data.routes}}' | jq -r 'join("\n")' | sort | uniq > "routes_${currentversion}";
                if [ "${PIPESTATUS[0]}" -ne 0 ]; then
                  echo "Error getting configmap contents, taking no action";
                  sleep 5;
                  continue;
                fi;
                for route in comm -23 "routes_${lastversion}" "routes_${currentversion}"; do
                  [ ! -z "$(ip route show | grep "${route}" | grep "${gateway}")" ] || continue;
                  echo "Deleting ${route} via ${gateway} ...";
                  ip route del "${route}" via "${gateway}";
                done;
                for route in $(comm -1 "routes_${lastversion}" "routes_${currentversion}" | awk '{print $1;}'); do
                  [ -z "$(ip route show | grep "${route}" | grep "${gateway}")" ] || continue;
                  echo "Adding ${route} via ${gateway} ...";
                  ip route add "${route}" via "${gateway}";
                done;
                rm -f "routes_${lastversion}";
                lastversion=${currentversion};
              done
