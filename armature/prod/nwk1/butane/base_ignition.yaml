---
variant: fcos
version: 1.3.0
passwd:
  users:
    - name: anthonyjrabbito
      groups:
        - wheel
        - sudo
      ssh_authorized_keys:
        - ${anthonyjrabbito_ssh_key}
storage:
  files:
    - path: /etc/hostname
      mode: 0644
      contents:
        inline: ${hostname}
    - path: /etc/zincati/config.d/51-rollout-wariness.toml
      contents:
        inline: |
          [identity]
          rollout_wariness = 0.001
    - path: /etc/zincati/config.d/55-updates-strategy.toml
      contents:
        inline: |
          [updates]
          strategy = "periodic"
          [[updates.periodic.window]]
          days = [ "Sat", "Sun" ]
          start_time = "22:30"
          length_minutes = 60
    - path: /etc/caddy/Caddyfile
      contents:
        inline: |
          # The Caddyfile is an easy way to configure your Caddy web server.
          #
          # Unless the file starts with a global options block, the first
          # uncommented line is always the address of your site.
          #
          # To use your own domain name (with automatic HTTPS), first make
          # sure your domain's A/AAAA DNS records are properly pointed to
          # this machine's public IP, then replace ":80" below with your
          # domain name.
          :80 {
              # Set this path to your site's directory.
              root * /usr/share/caddy

              # Enable the static file server.
              file_server

              # Another common task is to set up a reverse proxy:
              # reverse_proxy localhost:8080

              # Or serve a PHP site through php-fpm:
              # php_fastcgi localhost:9000
          }
          # Refer to the Caddy docs for more information:
          # https://caddyserver.com/docs/caddyfile
  links:
    - path: /etc/localtime
      target: ../usr/share/zoneinfo/America/New_York
systemd:
  units:
    - name: podman-caddy.service
      enabled: true
      contents: |
        [Unit]
        Description=Run caddy
        After=network-online.target
        Wants=network-online.target

        [Service]
        ExecStartPre=mkdir -p /var/lib/caddy
        ExecStartPre=-/bin/podman kill caddy
        ExecStartPre=-/bin/podman rm caddy
        ExecStartPre=-/bin/podman pull docker.io/library/caddy:latest
        ExecStart=/bin/podman run --name caddy --net=host \
                  -v /etc/caddy/Caddyfile:/etc/caddy/Caddyfile:z \
                  docker.io/library/caddy:latest

        ExecStop=/bin/podman stop caddy

        [Install]
        WantedBy=multi-user.target
    - name: rpm-ostree-install-qga.service
      enabled: true
      contents: |
        [Unit]
        Description=Layer qemu-guest-agent with rpm-ostree
        # We run after `systemd-machine-id-commit.service` to ensure that
        # `ConditionFirstBoot=true` services won't rerun on the next boot.
        Before=zincati.service
        After=systemd-machine-id-commit.service
        After=network-online.target
        ConditionPathExists=!/var/lib/rpm-ostree-install-qga.stamp
        StartLimitInterval=1200s
        StartLimitBurst=5

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/rpm-ostree cancel
        ExecStart=/usr/bin/rpm-ostree install --allow-inactive qemu-guest-agent
        ExecStart=/bin/touch /var/lib/rpm-ostree-install-qga.stamp
        ExecStart=/bin/systemctl --no-block reboot
        Restart=on-failure
        RestartSec=120s

        [Install]
        WantedBy=multi-user.target
